[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Fortunately, there a wealth of freely available tools can help to complete these tasks: think R, Python and QGIS.🔨\nUnfortunately, a steep learning curve is often required to apply these tools, particularly when we don’t all have a strong background in coding, GIS or remote sensing.\nThe UQ Geospatial Analysis Community of Practice (sometimes UQGAC, sometimes UQGEO) tries to make this process a bit less painful, by sharing our experiences, skills and tricks in a friendly and inclusive environment.\n👩‍💻 We run monthly skill sharing tutorial sessions where a member of the community teaches us something they have learned along the way.\nThis usually occurs on the last Thursday of each month.\nSee upcoming events for the next session.\nAnd check out our blog for previous sessions.\nIf you want to get involved, just email Mitch at mitchel.rudge@uq.edu.au"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Brisbane Geospatial Community of Practice",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nNov 3, 2022\n\n\nCatherine Kim\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nwebsite\n\n\n\n\n\n\n\n\n\n\n\nNov 23, 2021\n\n\nCatherine Kim\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspatial\n\n\nvisualisation\n\n\n\n\n\n\n\n\n\n\n\nOct 28, 2021\n\n\nUQGSAC\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html",
    "href": "posts/build-blog-w-quarto/index.html",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "",
    "text": "We will be covering some basics of multiple programming skills (Git/GitHub, R, Markdown, etc…) with the aim of empowering people to contribute to quarto websites such as this one - the Brisbane Geospatial Community of Practice. The idea is to encourage community members to contribute material directly instead of funneling everything through a website administrator.\nBackground of the Community of Practice with founder, Mitchel Rudge (https://twitter.com/MitchRudge). See the About page for more info.\nSo the group has a website… why another blog?"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#creating-a-blog-with-quarto",
    "href": "posts/build-blog-w-quarto/index.html#creating-a-blog-with-quarto",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Creating a blog with quarto",
    "text": "Creating a blog with quarto\n\nWhat is quarto?\nQuarto is a “multi-language, next-generation version of R markdown from RStudio.” It is designed to be programming language (compatible with R, python, Julia, and more…?) and tool agnostic (RStudio, VSCode, jupyter, Observable). In this tutorial, we are focusing on R and RStudio.\nThe basic model of Quarto publishing is taking a source document and rendering it to a variety of outputs like html, pdfs, and Word. The backend process is illustrated below. The key difference from R Markdown is that it uses pandoc. For those interested in the details, I would recommend the Welcome to Quarto! 2 hr workshop on Youtube led by Tom Mock at RStudio.\n\nFAQ for R Markdown users.\n\n\nMake a quarto blog in RStudio\nRStudio has quarto built-in with recent versions after 2022.07. Go to File > New Project or the R in a blue cube under ‘Edit’ and you will see Quarto options right there!\n\nLet’s click on the ‘Quarto Blog’ option. In the next window, name you project (e.g., myblog), select where to save the project with the Browse button, and ensure ‘Create a git repository’ is checked. More on git later.\n\nThe default project is populated with some example files and folders. The open index.qmd file is the ‘home page’ of the blog that will list all the posts. The .qmd is the file extension for a Quarto file just like .Rmd for R Markdown. Go ahead and change the first title field in the YAML. For instance, change ‘my blog’ to ‘My Blog’.\n\nYAML stands for ‘Yet Another Markup Language’ and is delineated by a trip dash (—) at the beginning and end of the YAML section. This is where you define settings for you quarto document/post.\n\nNow, let’s look at one of the template posts. In the Files pane click on posts > welcome > index.qmd. Here we can see a template for a ‘Welcome’ post.\nA recent addition to RStudio is that you can view the ‘Source’ (top left pane) as either the Source code or Visual editor.These views can be swapped by toggling the buttons at the top right of the pane. The Source code (blue box below) displays all the source code for your quarto file such are your R code (in chunks - none in this example) and Markdown narrative text.\n\nThe Visual editor displays a rendered version of your quarto file - more like what it will look like when the site is published. This is more similar to writing in a text editor like Word. You can also see there some extra formatting buttons in the Visual Editor like bold/italics and super/subscripts. The ‘Table’ function is also a welcome edition as formatting tables in Markdown is very finicky and tedious.\nTry inserting a table or super/subscript (Format > Text > Strikethrough/Superscript/Subscript/Smallcaps) in the Visual editor and then toggle to the Source code. Now you can see the associated Markdown code for whatever you just did! Super handy.\nNow, open the _quarto.yml file. Here we can see the project type (a website), some website formatting (the navigation bar), and some other customization fields. Update the title field to match the title we edited earlier. In my case, it was ‘My Blog’. Feel free to edit other fields such as your GitHub, Twitter, LinkedIn profile links etc. You can also change the theme to one of many built-in themes.\n\n\nDon’t forget to save your files when you make changes. If the file name in the tab is red - that means you have unsaved changes.\n\n\n\n\n\n\n\nNote\n\n\n\nDon’t forget to save your files when you make changes. If the file name in the tab is red - that means you have unsaved changes.\n\n\nThe Visual editor is pretty cool, but it’s not exactly the same as previewing your website before publishing. Click on the Render button at the top and see what happens.\nA preview of your blog should have popped-up in a web browser. You can navigate like you would a website to see all the features. Go to the about page - we can see it is the default page with the Quarto blog project. If you’d like, open the about.qmd page in the project directory and make a change. Add some text, delete a link (like LinkedIn) and then save your changes.\nCongrats - you’ve made a blog!\n\n\n\nCelebrate! Credit: http://www.reactiongifs.com/cheering-minions/\n\n\nIn the top right view pane of RStudio, you can see Render and Background Jobs tabs. If you’d like to get an idea of what is happening in the background, check out these tabs. In the Backgroun Jobs tab, there is a red stop sign in the top right corner to stop previewing your site.\nBut how do I share it with the world?? First, we will need to version control our project with git and store it in a remote repository."
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#creating-a-post-on-the-uqgac-website",
    "href": "posts/build-blog-w-quarto/index.html#creating-a-post-on-the-uqgac-website",
    "title": "Build a blog with git, R, and quarto",
    "section": "Creating a post on the UQGAC website",
    "text": "Creating a post on the UQGAC website\nCatherine Kim, PhD\nPostdoctoral Associate, School of Biological Sciences\nTechnology Trainer, UQ Library\nTwitter: @fishiintheC\nWhat we will cover:\n\nblogdown basics\nGit and GitHub basics\nHow to create a post on the UQGSAC blogdown website\nR Markdown basics\n\nI have pieced this together using many other resources on the above which are mentioned throughout. Thank you to Mitch and Stéphane for their help with this tutorial and workshop!\nWhat you will need:\n\nInstallations - R, RStudio, Git\nA GitHub account (free) with your login and personal access token (PAT) details handy"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#blogdown-basics",
    "href": "posts/build-blog-w-quarto/index.html#blogdown-basics",
    "title": "Build a blog with git, R, and quarto",
    "section": "blogdown basics",
    "text": "blogdown basics\nblogdown is an R package that allows the creation of websites using R Markdown and Hugo, a static site generator. blogdown websites in R have been all the rage the last few years and you have probably seen many ‘Hugo-Academic theme’ personal websites - all built in R!\n\n\n\nblogdown hex sticker Credit: Creating Website with R Markdown\n\n\n\nThere is a short online book on blogdown written by the developer, Yihui and others.\nA recent article by Allison Hill on starting your own blogdown website from scratch.\nSee Mitch and Stéphane’s tutorial for UQGSAC on creating a blogdown website.\n\nThis session focuses on how to go about contributing a post to an existing website.\nThe UQGSAC website is built using the anatole theme. There are many themes to choose from and if you know html/CSS you can even build your own theme.\nSo, how do we go about contributing to a blogdown website?\n\n\n\nProgrammer GIF Credit: Capgemini India on GIPHY\n\n\nA good place to start is making sure you have installed the blogdown package:\n\ninstall.packages(\"blogdown\")\n\nArticle about setting global options in blogdown if you need to set the Hugo version in your .Rprofile (blogdown::config_Rprofile()).\nTo allow multiple people to contribute to the same website, the website is hosted on GitHub and Netlify.\nAs the website is already set-up, we will be dealing with Git + GitHub and R + RStudio + R Markdown."
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#git---what-is-it",
    "href": "posts/build-blog-w-quarto/index.html#git---what-is-it",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Git - what is it?",
    "text": "Git - what is it?\nA version control software (think track changes) useful for collaborating on and sharing code.\nGit is the software itself that records changes to a set of files locally. There are several hosting platforms that are like online repositories (think Dropbox, Google Drive, etc.) that work with Git: Bitbucket, GitLab, and GitHub to name a few.\nThese platforms not only allow for version control but also to collaborate, organize, and back up projects.\nIn this case, we will be using GitHub to access the website files, make some changes (i.e., add a post), and then incorporate those changes back to the website repository on GitHub which will automatically update the website itself. 🙌\nFirst, we will contribute a post to an existing website repository on GitHub, but there are lots of fabulous and free resources online that go more into depth on Git:\n\nIf you need to be convinced to use Git for version control see this article and Happy Git and GitHub for the useR to git started both by Git/R guru Jenny Bryan.\nSee Caitie Kuempel’s R Ladies Brisbane presentation on getting started with GitHub in RStudio.\n\n\nGit Terminology\nRepository/repo - where a project is stored in GitHub. Think of it like a folder holding all the relevant documents that you can version control, view history, and add collaborators. The repository or repo holds all the relevant files for the website - most of which we will not touch.\nCommit - is one or more changes to a file or set of files that you are asking GitHub to keep track of.\nPush - sending your committed changes to a remote repository on GitHub. Local changes updated on the GitHub website where other people can access.\nPull - incorporating and merging changes. An edit on the remote repository on GitHub can be pulled to a local repository.\nDiff - difference, or changes made that are visible as insertions/deletions for a commit.\nMain - the default branch you are on. Master has recently updated to main, but they are the same thing. You are more likely to come across master on older resources. Jenny Bryan strongly urges you to create a new branch to work off of which requires using command line. For the purpose of contributing to a quarto website, I will forgo covering this as it is unlikely more than one person will be contributing at the same time.\nOrigin - the remote repo online from which you have cloned your local copy from.\n\n\n\nHow committing goes… Credit: xkcd comics\n\n\n\n\nUsethis on our blog project\nWe are going to use the [usethis](https://usethis.r-lib.org/) package. Usethis is a workflow package designed to automate repetitive tasks for package development and project setup (what we’ll be doing here).\n\n\n\n\n\n\nNote\n\n\n\nYou might need to install usethis:\ninstall.packages(\"usethis\") library(usethis)\nOr you can install the development version: install.packages(\"devtools\") if you don’t have devtools. devtools::install_github(“r-lib/usethis”)`\n\n\nFirst, we must configure a personal access token or PAT using usethis. Type usethis::create_github_token() in the console. You will either need to log into GitHub or confirm your password. usethis will automatically select some scopes - which ones are selected?\nLeave this page open or copy this and keep it a text file/password manager. We will use it again later. You can even use gitcreds::gitcreds_set() to store your PAT now.\n\n\n\n\n\n\n\ngitcreds::gitcreds_set()\n\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -> Adding new credentials… -> Removing credentials from cache… -> Done.\n\n\n\nNow let’s setup a remote repo on GitHub using usethis::use_github. This section is straight out of 17.3 Happy git with R - create and connect a github repo with usethis.\n\nHappy Git and GitHub for the useR is the online bible of using git with R by legendary Jenny Bryan. This book covers all the basics in details and provides workflows and troubleshooting Jenny Bryan has a whole chapter on PATs that I would highly encourage you to check out.\n\nHow did that go? Did you get an error?\nDon’t worry. This is a common mistake to forget to do an initial commit. Click on the Commit button in the Git pane, select all (Ctrl/Cmd + A) and click Stage. Then, make a commit message in the top right of the window. Click Commit. Once that’s complete, let’s usethis::use_github() in the Console again. How did it go this time?\nHopefully, you see something like this: \nNotice that part of what use_github() does is push the master or main branch to GitHub.\nNow go to the link there use_github() set the remote too. You will see everything that you’ve commited is now in the online, remote repo! Have a look around. You can navigate, add a READMIE.md file, and even edit files in GitHub.\nLet’s go ahead and do this. Go to the ‘Welcome’ post, click on the pencil to edit, and make a change. At the bottom you can add a commit message then commit your change.\nCool, but how do we get these changes we made on our remote repo into our local repo on our computer? make a change - edit the template welcome post in some way\nSave the edits. Now look at the Git pane - what’s there?\nNext we need to stage and commit our changes. This is a record that we can view and go back to if we ever need to.\nFinally, let’s push these edits to our remote repo that we - check out change on remote"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#how-to-create-a-post-in-blogdown",
    "href": "posts/build-blog-w-quarto/index.html#how-to-create-a-post-in-blogdown",
    "title": "Build a blog with git, R, and quarto",
    "section": "How to create a post in blogdown",
    "text": "How to create a post in blogdown\nStarting with Git and GitHub:\n\n1. Fork the repo\n\nSign in with your GitHub account\nGo to the geocommunity/website repo\nPress the ‘Fork’ button at the top right. \nA forked copy of the repo should now be visible in your GitHub account. YOU/blog_website is the origin for your local copy of the repo in RStudio and geocommunity/blog_website is the upstream repo.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\n\n\n2. Clone the repo in a new RStudio project\n\nYou will need your GitHub credentials handy.\nYou can also set up RStudio so you do not need to input your GitHub credentials every time.\n\nFrom your forked repo, click on the green ‘Code’ button and copy the link in the pop-up window.\n\n\n\nScreenshot of finding the url to clone.\n\n\nNext, in RStudio, go to File > New Project. In the pop-up window, click the last option ‘Version Control’ and then ‘Git’. In the following window, paste the url you copied from your forked GitHub repo in the first box which will automatically input the name of the project.\n\n\n\nPop-up windows of cloning a GitHub repo in RStudio\n\n\nConceptually, what we have done is:\n\n\n\nConceptual diagram of forking and cloning in GitHub Credit: Happy Git for the useR\n\n\nNow that we have cloned the repository, let’s explore the file structure a little in the ‘Files’ tab in RStudio. It is NOT a very intuitively set-up even for intermediate users of R. For the purposes of creating a new post to add to the blog, we are mostly concerned with the content/english/ directory that contains the post/ sub-directory.\nThe rest of the files are the ‘backend’ of the site using html, CSS, js, etc. to build the website. Have a look if you are curious but make changes at the risk of being ‘that person’ to break the site! But don’t worry, since we are using Git version control all changes are tracked and reversible.\nNow that we are somewhat familiar with the project structure, let’s create a new post.\n\n\n3. Create a new post\nIn our new RStudio project housing our forked and cloned GitHub repo of the website:\nUse blogdown::new_post(\"New post name\", ext = \".Rmd\") in the console to create a new post with a .Rmd extension. Alternatively, you can go to the Addins button under the menu and choose ‘New Post’ under the BLOGDOWN section and fill in the information in the pop-up window.\n\n\n\nA new blogdown post in RStudio.\n\n\n\nThis will create a new page/post bundle folder or sub-directory within post/ with the date and the name given in new_post() function. e.g., post/2021-11-18-New-post-name.\nAn index.Rmd file has been opened and only contains a YAML header (enclosed by ---). More on that later. Do not change the name of the .Rmd file.\nEach post gets its own bundle which is where your static post-specific files like images or data (.csv files etc.) used in your post should go.\nNote that the “New post name” will not only be the incorporated into the sub-directory name, but also the url to the post. Read: choose wisely and concise > long descriptive name.\nThis “New post name” will automatically be filled as the ‘Title:’ in the .Rmd YAML heading. If you want a longer, descriptive title - change it in the YAML heading.\nIt is recommend you use either blogdown::new_post() or the Addin to create a new post instead of manually creating a new file (File > New File > R Markdown script)\n\nHere, we will stick with the .Rmd extension, but know there are a few file types:\n.md - markdown, cannot run code chunks\n.Rmd - R markdown -> rendered to .html using Pandoc\n.Rmarkdown - also R markdown -> compiled to .markdown documents\nIf you want more of this detailed stuff see: https://bookdown.org/yihui/blogdown/output-format.html.\n\n\n4. Commit the changes i.e., the new post\nLet’s commit our new post. You can add something like a line of text, or not.\n\nIf you cloned the repo properly there should be a Git tab in the upper right hand window in RStudio where the Environment is. In the Git repo, there should be some files listed (i.e., post/2021-11-23-New-post-name) with different colored boxed under the ‘Status’ column - hover with the cursor to see what they mean.\nCheck the ‘Staged’ box for the files you want to include in this commit.\nClick the Commit button and a window will pop-up. In the bottom section, you will see the changes made to the file as additions (green) and deletions (red) - this is known as the diff in GitHub speak. For a new file, the whole thing will be green because it is all new.\nIn the ‘Commit message’ box, add a concise but descriptive message of the changes like ‘Added a new post bundle.’ Once you are happy with everything (file staged, commit messages, etc.) click the ‘Commit’ button.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\nSome stuff will happen and as long as you do not see any obvious errors then it has probably all gone well and you’ve made your first commit!\n\n\n\nCelebrate! Credit: http://www.reactiongifs.com/cheering-minions/\n\n\nKnowing when and how often to commit is a bit of an art that comes with experience. In general, you want to commit changes that are related to a single problem and a good commit message. There is also a History button on the top left corner that will list all the commits with messages you have made and you can view the diff by clicking on a commit. All commits have a unique code which you can use to return to a previous commit etc.\nImportant notes:\n\nOnce you have served the site (see Step 6) it will create additional files within your post bundle directory. Be sure to commit all files in the post bundle created when knitting (/index.html, /index_files, etc.) not just the index.Rmd file as they will be necessary to build the site from GitHub. - You can stage them all together as one commit.\nYou will not be able to see diffs in the commit window until they have been saved.\n\nSee more on committing and best practices from the R packages book.\n\n\n\nHow committing goes… Credit: xkcd comics\n\n\n\n\n5. Push the changes to GitHub\nThe changes and commits we have made are local, but we need to get them onto the GitHub repo and then the website. This is where we need to push.\nIn the Git window, you will see a blue down arrow for pulling and a green up arrow for pushing. You will also see a message along the lines of Your branch is ahead of 'origin/main' by X commits under those buttons.\nFor the purposes of contributing a post to a blogdown website, we will not worry about pulls and fetching upstream. This basically means keeping your origin/master repo synced with the original upstream repo that you forked.\nIf you stick to creating a new post bundle and only modifying files within the post bundles it should be okay without fetching upstream. BUT know that if you are using GitHub to work collaboratively, staying current with the original repo is important and in general it is a good practice to always pull before you push. Recommend Happy Git and GitHub for the useR as a trusty guide.\nIf you want to try fetching upstream it is easiest to do via GitHub. Followed by a pull in RStudio.\n\nLog into your GitHub account online, and navigate to your YOU/blog_website repo.\nUnder the green Code button, there should be a Fetch upstream button that will sync your forked repo with the original upstream repo.\nThere is information about the status of your branch compared to the original upstream repo e.g., ‘up to date’ or ‘X commits ahead/behind’ to give you an idea if you need to fetch or not.\nNow in RStudio, you should be good to pull.\nRevisiting this diagram, the fetch upstream is updating your forked repo from the original yellow repo and then the pull is updating your local repo from your forked repo.\n\n\n\n\nDiagram of fetching upstream and pulling Credit: modified from Happy Git for the useR\n\n\nNow we will push our commits from or local repo to our remote origin/master repo on GitHub.\nIf this is your first time using Git with RStudio, you will have to set-up a personal access token or PAT in GitHub. For detailed directions, go to the GitHub page.\n\nGo to your GitHub account online and click on your profile photo in the upper-right and go to Settings.\nIn the left sidebar, click on Developer settings then Personal Access Tokens.\nClick the Generate a new token button and give a descriptive name and expiration.\nSelect scopes or privacy settings (defaults are generally fine) and the generate the token.\nCopy your PAT and put it in the password field for any pop-ups asking for your GitHub credentials when you push.\n\nIf you see HEAD -> main then all good.\n\n\n\nScreenshot of push window in RStudio.\n\n\nNow if you go back to your GitHub account and forked repo online, you should see the changes you made locally are now in the remote online repo and your commit message.\n\n\n\nScreenshot of pushed changes on forked GitHub repo.\n\n\nIn general, you should commit often and then push.\n\n\n6. Serve the site\nIn the console, run blogdown::serve_site(). Alternatively, can click on RStudio ‘Addins’ and select ‘Serve Site’. Be patient, but what happens?\n\n\n\nScreenshot of served site in RStudio.\n\n\nSome important information on what is going on from blogdown: Creating Websites with R Markdown:\n\nServing the site did the following: 1. Started a local Hugo server to help you preview your website, and 2. Knitted a sample .Rmd post to an .html page. You can see this from the progress message that printed to your console: Rendering content/english/post/2021-11-23-creating-a-post/index.Rmd... Done\n\nYou can also view the locally served website in a browser by clicking on the “Show in new window” button at the top left of the RStudio Viewer pane to the right of the broom.\nServing the site is using something called LiveReload:\n\nLet’s introduce an important and helpful technology that you just used: LiveReload. Serving your site uses LiveReload, which means your website will be automatically rebuilt and reloaded in your web browser when you modify any source file of your website and save it. Basically, once you launch the website in a web browser, you do not need to rebuild it explicitly anymore. All you need to do is edit the source files, such as R Markdown documents, and save them. There is no need to click any buttons or run any commands. LiveReload is implemented via blogdown::serve_site() and Hugo, and you will only need to use it once per work session.\n\nRemember, every time you save your .Rmd file will activate the LiveReload. To stop serving the site locally run blogdown::stop_server() in the console.\n\n\n7. Create your content\nOnce the website is set-up, forked, and cloned… you can get on with creating a new post with minimal coding. The main thing you will need to use is:\n\nR Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML documents that we can incorporate into the website. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. For a website post, knitting is not as important because we can serve our site locally which automatically knits anything new and view the changes as we just learned 👆.\nNow let’s add some information about R Markdown:\n\nYAML header\nThe YAML, or Yet Another Markdown Language, header at the top of the .Rmd is set between --- tags. Here is where information like the Title, Date, Author of the document go and will appear in the post.\nHave a look at previous posts and add any relevant tags or categories as you like.\nThe default .Rmd has some redundant settings (tags vs Tags) so if you use them stick with the lower case settings.\n\n\nFormatting\nCan bold and italicize text.\nHeadings:\nCan specify headings using # marks. The number of has symbols corresponds to the level of the header (2 hashs = level 2 header)\nThis will also create a structure outline of your document you can navigate either by using the ‘Formatting’ button at the bottom of the .Rmd or the right most button in the top right of the .Rmd.\n\n\n\nScreenshot of buttons to view document outline\n\n\nMake lists:\n\none\ntwo\nthree\n\nfull indent for sub-bullet\n\n\nOrdered lists:\n\nlists\nneed spaces\nbefore and after\n\nFor a return to start a new line, leave two spaces at the end of the line.\nLike this.\n\n\nIncluding code\nYou can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nThere is also inline code: The mean of speed in the cars data set is 15.4.\n\n\nInclude mathematical notation\nMathematical notation can be enabled using third party JavaScript libraries like KaTeX. See resource of supported TeX functions. For these to render correctly you must add math: true to the YAML header at the top of the .Rmd.\nTo enter equations like a code chunk or block math, use two $ on separate lines surrounding your equations.\nPut two \\ after a line for a full return.\n\\[\ny = mx + \\beta\\\\\nE = mc^2\n\\]\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\nYou can also use inline math notation by sandwiching it between $ without spaces. Like so \\(\\mu = 0.2566\\).\nAnother inline way: (= = 1.6180339887…)\n\n\nIncluding Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\nChunk options\nChunks are the gray areas in the .Rmd file where you can add code that will be run. These are defined by three back ticks (not a single quote, the key to the left of the 1). You can insert R code chunks but also in other languages! See the green ‘Insert’ code chunk button to see different options. An R code chunk will have the an {r  } after the opening back ticks.\nThe keyboard short cut to add an R code chunk is Ctrl + Alt + I\nYou can also set options in the {} of a chunk like hide the code chunk (echo = FALSE), suppress warnings (warnings = FALSE), and cache the chunk (cache = TRUE) if you have something that takes a while to run.\nLet’s set echo = FALSE for our plot chunk above. We are only interested in seeing the plot, not the code that produces the plot.\nYou can add a code chunk at the beginning of the .Rmd file and set global options that will apply to the whole document.\n\nknitr::opts_chunk$set(echo = TRUE)\n\nSee more at:\n\nRStudio - https://rmarkdown.rstudio.com/lesson-3.html\nR Markdown Cookbook - https://bookdown.org/yihui/rmarkdown-cookbook/\n\nIt is also a good idea to name your chunks as chunks are included in the document outline. Chunks cannot have the same name - you will get an error.\n\n\nInsert objects\nYou can add pictures, weblinks, and GIFs in R Markdown. They all follow the similar hyperlink formats.\nFor a hyperlink to a website you put the word you want to hyperlink in square brackets [] followed immediately (no spaces or characters) by round parentheses (). E.g. [GitHub](www.github.com)\nTo insert an image or gif from a website you add a ! before the square brackets like so: ![description](https://media.giphy.com/media/sJWNLTclcvVmw/giphy.gif). The description in the [] will appear as a caption and the link must end in the appropriate file extension (.gif, .jpg, .png, etc) to work.\n\n\n\nFunny Yawn Credit: https://www.reddit.com/r/gifs/comments/54q75s/goodnight_tongue/\n\n\nYou can also insert pictures using the RStudio ‘Addins’ > ‘Insert Image’ and uploading an image saved on your computer with a few other options like alt text. This will result in the same hyperlink code as inserting an image, but with a relative path instead of the url.\nExample use Addin to insert image\nYou can also save files (like images, html presentations) in your post bundle to link using relative paths on your own.\n\n\n\n\n7. Pull Request\nOkay, so as you were creating the content of your post you should have been committing regularly and then pushing, right?\nLet’s say we are finished with our beautiful post and read to incorporate it into the original upstream repo geocommunity/blog_website that we forked from. Remember, when we push we are pushing the commits we made locally on our computer to our YOU/blog_website repo that we forked from the original repo.\nBecause we are not owner/developers of the upstream geocommunity/blog_website repo we need to submit a pull request to submit our new blog post for approval into the upstream repo.\n\nOn your YOU/blog_website repo in your GitHub account, click on Pull requests.\nOn the right of the screen, there should be a green New pull request button. This will take to you a ‘Comparing changes’ window outlining the files and changes you have made. This will alert you to any merge conflicts with the original upstream repo. Again, sticking to creating a new post bundle/content should avoid any merge conflicts.\nClick the green Create pull request button on the right. This will take you to a ‘Open a pull request’ window that will have your last commit and space to add a larger message with your pull request or PR.\nOnce you are happy, click the green button at the end and wait for approval. You can have a bit of a conversation to hash out any issues as well over the approval process.\n\n\n\n\nScreenshot of GitHub open a pull request.\n\n\nCongratulations - now you have submitted your blog post to a blogdown site!\n\n\n\nCheers Credit: Sony"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#troubleshooting",
    "href": "posts/build-blog-w-quarto/index.html#troubleshooting",
    "title": "Build a blog with Quarto, git, RStudio",
    "section": "Troubleshooting…",
    "text": "Troubleshooting…\nLet’s face it, the likelihood of something going awry following this tutorial is not 0… Few things that might help along the way:\n\nSometimes it is difficult to tell when the ‘LiveReload’ has finished or if you are used to saving regularly every few minutes that constant updating of ‘LiveReload’ can freeze RStudio.\n\nSolution: The good ’ole Restart R (Session > Restart R) or close and re-open.\n\nFormatting wise, it’s a good idea to put full line returns before/after formatting bits like lists and inserting images. Something to check if your content is not formatting as you expect.\nOTHERS??"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#resources-mentioned",
    "href": "posts/build-blog-w-quarto/index.html#resources-mentioned",
    "title": "Build a blog with Quarto, git, RStudio",
    "section": "Resources mentioned:",
    "text": "Resources mentioned:\n\nCreating Websites with R Markdown by Yihui Xi, Amber Thomas, and Alison Presmanes Hill.\n“Up & running with blogdown in 2021” Alison Hill.\n“Creating a Geospatial Blog with blogdown” on the UQGSAC blog by Mitch Rudge and Stéphane Guillou.\nExcuse me, do you have a moment to talk about version control? by Jenny Bryan\nHappy Git and GitHub for the useR by Jenny Bryan.\nGetting Started with GitHub R Ladies Brisbane presentation by Caitie Kuemple.\ngeocommunity/website GitHub repo\n18.6 Commit best practices from the R packages book by Hadley Wickham and Jenny Bryan.\nR Markdown\nKaTeX - Supported Functions\nCode Chuncks\nR Markdown Cookbook by Yihui Xie, Christophe Dervieux, Emily Riederer."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html",
    "href": "posts/geospatial-blog-w-blogdown/index.html",
    "title": "Creating a geospatial blog with blogdown",
    "section": "",
    "text": "Note\n\n\n\nThis blog is now on quarto and thus some of the information below may be out of date.\nCheck out the updated post - Building a blog with git, GitHub, R, and quarto.\nIn this post, we will go through the process of creating a geospatial blog, specifically this blog.\nFirst, we will run through how to create a site and host it through github and netlify. Then we will show you the options for publishing both a raster and vector data."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#good-resources",
    "href": "posts/geospatial-blog-w-blogdown/index.html#good-resources",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Good resources",
    "text": "Good resources\n\nhttps://www.apreshill.com/blog/2020-12-new-year-new-blogdown/\nhttps://www.youtube.com/watch?v=x-Ch0-w1UhY\nhttps://solomonkurz.netlify.app/post/2021-05-03-blogdown-updates-prompted-a-website-overhaul-these-are-my-notes/\nhttps://bookdown.org/yihui/blogdown/installation.html"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#prerequisites",
    "href": "posts/geospatial-blog-w-blogdown/index.html#prerequisites",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nFairly recent version of R studio (RStudio IDE version, v1.4.1106 +)\nGithub account\nGIT locally on computer. (Happy git with R https://happygitwithr.com/)\n\ngitforwindows.org\nDownload GNU\nDefault on all settings  Make sure to select Git from the command line and also from 3rd party software\n\nSign up for Netlify using Github account"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#create-a-new-github-repository",
    "href": "posts/geospatial-blog-w-blogdown/index.html#create-a-new-github-repository",
    "title": "Creating a geospatial blog with blogdown",
    "section": "1. Create a new github repository",
    "text": "1. Create a new github repository\nInitialise with readme, but don’t add the .gitignore file. Then copy link https link."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#create-a-new-project-in-r-studio",
    "href": "posts/geospatial-blog-w-blogdown/index.html#create-a-new-project-in-r-studio",
    "title": "Creating a geospatial blog with blogdown",
    "section": "2. Create a new project in R studio",
    "text": "2. Create a new project in R studio\nIn R studio, go to File > new project > Version control > git, and Paste the URL from before. Save the project somewhere sensible.\nNow install blogdown with Install.packages(“blogdown”), and load with library(blogdown).\n\ninstall.packages(\"blogdown\")\nlibrary(blogdown)\n\nNow to create a new site, just add\n\nnew_site()\n\nThis will give the default theme, but there are a lot of different themes to choose from!\nhttps://themes.gohugo.io/\nIts important to find one that you like, but also that is up to date and works. For this blog, we ended up going with https://themes.gohugo.io/themes/anatole/ over some other options which were buggy, probably due to being out of date.\nSo to build the site with your theme of choice, run\n\nnew_site(theme = \"lxndrblz/anatole\")\n\nAdding theme= “gighubusername/themerepo” of the theme you choose.\nWhen prompted, select y to let blogdown start a server. This will let you preview the site in the viewer. To view in a browser, click the show in new window (next to the broom) to launch it locally.\nGenerally, you can serve the site, and stop serving the sites using\n\nblogdown::serve_site() #to serve the site locally\nblogdown::stop_server() #to stop serving the site"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#write-a-post",
    "href": "posts/geospatial-blog-w-blogdown/index.html#write-a-post",
    "title": "Creating a geospatial blog with blogdown",
    "section": "3. Write a post",
    "text": "3. Write a post\nHopefully the local site is working. We can now add a new blog post using either\n\nblogdown::new_post() \n\nOR, a better method is to navigate through addins dropdown (under help, right of git icon), click new_post. This brings up a dialog to fill out.\nSelect file type, markdown for simple text, or .Rmd or .Rmarkdown for embedding code.\nNow we can add code chunks! The easiest way to do this is to click the green +c just above the editor.\nAs an example\n\nlibrary(ggplot2)\nggplot(Orange, aes(x = age, \n                   y = circumference, \n                   color = Tree)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\nIf its not working, run\n\nblogdown::check_site() \n\nand follow the instructions next to the [todo] items."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#load-to-github",
    "href": "posts/geospatial-blog-w-blogdown/index.html#load-to-github",
    "title": "Creating a geospatial blog with blogdown",
    "section": "4. load to github",
    "text": "4. load to github\nIn the files tab, navigate to the .gitignore file. Add so it contains the following .Rproj.user .Rhistory .RData .Ruserdata .DS_Store Thumbs.db /public/ /resources/\nNow run\n\nblogdown::check_gitignore() \n\n#and \n\nblogdown::check_content()\n\nThen commit the files and push to github.\nDue to the massive number of files associated with the themes, we found it better to do the first commit through the shell\nTools>shell>git add -A\nTo authorise github, we found the best option to be to\nControl Panel > User Account > Credential Manager > Windows Credential > Generic Credential\nThen remove git credential\nThen, when you push the repo it’ll ask you for credential through the browser."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#publish-site",
    "href": "posts/geospatial-blog-w-blogdown/index.html#publish-site",
    "title": "Creating a geospatial blog with blogdown",
    "section": "5. Publish site!",
    "text": "5. Publish site!\nLog into netlify (using github account). Then click new site from git, continuous deployment: Github. you should be able to see the repo from within netlify. Select deploy site.\nIt will give you a temporary URL which is live! Now it will automatically update every time you push changes to github.\nTo change the site name, general > site details > change site name\nNow go back to R studio, and navigate to teh config (yaml or toml) and add in the correct url (probably around line 3)\nRun Blogdown::check_netlify() to find any issues."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#load-necessary-packages",
    "href": "posts/geospatial-blog-w-blogdown/index.html#load-necessary-packages",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Load necessary packages",
    "text": "Load necessary packages\n\nlibrary(sf)\n\nLinking to GEOS 3.9.1, GDAL 3.3.2, PROJ 7.2.1; sf_use_s2() is TRUE\n\nlibrary(tmap)"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#get-the-data",
    "href": "posts/geospatial-blog-w-blogdown/index.html#get-the-data",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Get the data",
    "text": "Get the data\nThe process to get the data is stored in a script (scripts/get_osm_data.R), instead of integrating it into this R Markdown file. This allows us to not overload the data provider but always querying the API, every single time the article is rendered! (And we don’t need to process the data every time either.)\nHere, we only need to read the data from a file that was previously created:\n\ngreen_space <- st_read(\"data/green_spaces.geojson\")\n\nReading layer `green_spaces' from data source \n  `C:\\Users\\jk845\\OneDrive\\R\\geocommunity_blog\\posts\\geospatial-blog-w-blogdown\\data\\green_spaces.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 5861 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 152.6764 ymin: -27.67486 xmax: 153.4664 ymax: -27.00613\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#visualise-on-a-slippy-map",
    "href": "posts/geospatial-blog-w-blogdown/index.html#visualise-on-a-slippy-map",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Visualise on a slippy map",
    "text": "Visualise on a slippy map\nThe tmap package is useful to visualise vector data on a slippy map.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(green_space) +\n  tm_polygons(col = c(\"#43C467\"), alpha = 0.5)\n\n\n\n\n\n\n\nData is copyright OSM contributors but release under an ODBL licence."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#load-the-packages",
    "href": "posts/geospatial-blog-w-blogdown/index.html#load-the-packages",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Load the packages",
    "text": "Load the packages\n\nlibrary(terra)\n\nterra 1.5.34"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#import-the-data",
    "href": "posts/geospatial-blog-w-blogdown/index.html#import-the-data",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Import the data",
    "text": "Import the data\nThe data comes from the Bureau of Meteorology website, it is a raster file of average annual rainfall. We’ve put the file into a data directory, inside the blog post’s directory.\n\nrain <- rast(\"data/rainan.txt\")"
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#inspect",
    "href": "posts/geospatial-blog-w-blogdown/index.html#inspect",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Inspect",
    "text": "Inspect\n\nrain\n\nclass       : SpatRaster \ndimensions  : 691, 886, 1  (nrow, ncol, nlyr)\nresolution  : 0.05, 0.05  (x, y)\nextent      : 111.975, 156.275, -44.525, -9.975  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : rainan.txt \nname        : rainan \n\n\nOne single band, by default with the WGS 84 CRS.\nThe average rainfall for the whole raster is 451.61 mm."
  },
  {
    "objectID": "posts/geospatial-blog-w-blogdown/index.html#visualise",
    "href": "posts/geospatial-blog-w-blogdown/index.html#visualise",
    "title": "Creating a geospatial blog with blogdown",
    "section": "Visualise",
    "text": "Visualise\nMake sure to add a caption to visualisations, and some alternative text if needed!\n\nplot(rain)\n\n\n\n\nAverage annual rainfall in mm (1980 to 2010)"
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html",
    "href": "posts/how-to-contribute-post/index.html",
    "title": "How to contribute a post",
    "section": "",
    "text": "We will be covering some basics of multiple programming skills (Git/GitHub, R, html, etc…) with the aim of empowering people to contribute to blogdown websites such as the University of Queensland Geospatial Analysis Community of practice (UQGAC) blog. The idea is to encourage community members to contribute material directly instead of funneling everything through a website administrator."
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#geospatial-analysis-community-of-practice---the-university-of-queensland-uqgac",
    "href": "posts/how-to-contribute-post/index.html#geospatial-analysis-community-of-practice---the-university-of-queensland-uqgac",
    "title": "How to contribute a post",
    "section": "Geospatial Analysis Community of Practice - The University of Queensland (UQGAC)",
    "text": "Geospatial Analysis Community of Practice - The University of Queensland (UQGAC)\nUnveil the new website!\nPoint of contact - Mitchel Rudge: mitchel.rudge@uq.edu.au\nSee the About page for more info."
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#creating-a-post-on-the-uqgac-website",
    "href": "posts/how-to-contribute-post/index.html#creating-a-post-on-the-uqgac-website",
    "title": "How to contribute a post",
    "section": "Creating a post on the UQGAC website",
    "text": "Creating a post on the UQGAC website\nCatherine Kim, PhD\nPostdoctoral Associate, School of Biological Sciences\nTechnology Trainer, UQ Library\nTwitter: @fishiintheC\nWhat we will cover:\n\nblogdown basics\nGit and GitHub basics\nHow to create a post on the UQGSAC blogdown website\nR Markdown basics\n\nI have pieced this together using many other resources on the above which are mentioned throughout. Thank you to Mitch and Stéphane for their help with this tutorial and workshop!\nWhat you will need:\n\nInstallations - R, RStudio, Git\nA GitHub account (free) with your login and personal access token (PAT) details handy"
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#blogdown-basics",
    "href": "posts/how-to-contribute-post/index.html#blogdown-basics",
    "title": "How to contribute a post",
    "section": "blogdown basics",
    "text": "blogdown basics\nblogdown is an R package that allows the creation of websites using R Markdown and Hugo, a static site generator. blogdown websites in R have been all the rage the last few years and you have probably seen many ‘Hugo-Academic theme’ personal websites - all built in R!\n\n\n\nblogdown hex sticker Credit: Creating Website with R Markdown\n\n\n\nThere is a short online book on blogdown written by the developer, Yihui and others.\nA recent article by Allison Hill on starting your own blogdown website from scratch.\nSee Mitch and Stéphane’s tutorial for UQGSAC on creating a blogdown website.\n\nThis session focuses on how to go about contributing a post to an existing website.\nThe UQGSAC website is built using the anatole theme. There are many themes to choose from and if you know html/CSS you can even build your own theme.\nSo, how do we go about contributing to a blogdown website?\n\n\n\nProgrammer GIF Credit: Capgemini India on GIPHY\n\n\nA good place to start is making sure you have installed the blogdown package:\n\ninstall.packages(\"blogdown\")\n\nArticle about setting global options in blogdown if you need to set the Hugo version in your .Rprofile (blogdown::config_Rprofile()).\nTo allow multiple people to contribute to the same website, the website is hosted on GitHub and Netlify.\nAs the website is already set-up, we will be dealing with Git + GitHub and R + RStudio + R Markdown."
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#git---what-is-it",
    "href": "posts/how-to-contribute-post/index.html#git---what-is-it",
    "title": "How to contribute a post",
    "section": "Git - what is it?",
    "text": "Git - what is it?\nA version control software (think track changes) useful for collaborating on and sharing code.\nGit is the software itself that records changes to a set of files locally. There are several hosting platforms that are like online repositories (think Dropbox, Google Drive, etc.) that work with Git: Bitbucket, GitLab, and GitHub to name a few.\nThese platforms not only allow for version control but also to collaborate, organize, and back up projects.\nIn this case, we will be using GitHub to access the website files, make some changes (i.e., add a post), and then incorporate those changes back to the website repository on GitHub which will automatically update the website itself. 🙌\nWe will focus on contributing a post to an existing website repository on GitHub, but there are lots of fabulous and free resources online that go more into depth on Git:\n\nIf you need to be convinced to use Git for version control see this article and Happy Git and GitHub for the useR to git started both by Git/R guru Jenny Bryan.\nSee Caitie Kuempel’s R Ladies Brisbane presentation on getting started with GitHub in RStudio.\n\n\nGit Terminology\nRepository/repo - where a project is stored in GitHub. Think of it like a folder holding all the relevant documents that you can version control, view history, and add collaborators. The repository or repo holds all the relevant files for the website - most of which we will not touch.\nFork - A copy of another user’s repo on your account. This allows you to freely change a project without affecting the original upstream repo. You can keep your fork synced with changes in the original repo. - this is fetching upstream.\nClone - a copy of a repository that lives on your computer instead of a website server like GitHub. Is still connected to the remote repo online and you can push/pull edits.\nCommit - is one or more changes to a file or set of files that you are asking GitHub to keep track of.\nPush - sending your committed changes to a remote repository on GitHub. Local changes updated on the GitHub website where other people can access.\nPull - incorporating and merging changes. An edit on the remote repository on GitHub can be pulled to a local repository.\nDiff - difference, or changes made that are visible as insertions/deletions for a commit.\nMain/Master - the default branch you are on. Master has recently updated to main, but they are the same thing. You are more likely to come across master on older resources. Jenny Bryan strongly urges you to create a new branch to work off of which requires using command line. For the purpose of contributing to a blogdown website, I will forgo covering this as it is unlikely more than one person will be contributing at the same time.\nOrigin - the remote repo online from which you have cloned your local copy from."
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#how-to-create-a-post-in-blogdown",
    "href": "posts/how-to-contribute-post/index.html#how-to-create-a-post-in-blogdown",
    "title": "How to contribute a post",
    "section": "How to create a post in blogdown",
    "text": "How to create a post in blogdown\nStarting with Git and GitHub:\n\n1. Fork the repo\n\nSign in with your GitHub account\nGo to the geocommunity/website repo\nPress the ‘Fork’ button at the top right. \nA forked copy of the repo should now be visible in your GitHub account. YOU/blog_website is the origin for your local copy of the repo in RStudio and geocommunity/blog_website is the upstream repo.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\n\n\n2. Clone the repo in a new RStudio project\n\nYou will need your GitHub credentials handy.\nYou can also set up RStudio so you do not need to input your GitHub credentials every time.\n\nFrom your forked repo, click on the green ‘Code’ button and copy the link in the pop-up window.\n\n\n\nScreenshot of finding the url to clone.\n\n\nNext, in RStudio, go to File > New Project. In the pop-up window, click the last option ‘Version Control’ and then ‘Git’. In the following window, paste the url you copied from your forked GitHub repo in the first box which will automatically input the name of the project.\n\n\n\nPop-up windows of cloning a GitHub repo in RStudio\n\n\nConceptually, what we have done is:\n\n\n\nConceptual diagram of forking and cloning in GitHub Credit: Happy Git for the useR\n\n\nNow that we have cloned the repository, let’s explore the file structure a little in the ‘Files’ tab in RStudio. It is NOT a very intuitively set-up even for intermediate users of R. For the purposes of creating a new post to add to the blog, we are mostly concerned with the content/english/ directory that contains the post/ sub-directory.\nThe rest of the files are the ‘backend’ of the site using html, CSS, js, etc. to build the website. Have a look if you are curious but make changes at the risk of being ‘that person’ to break the site! But don’t worry, since we are using Git version control all changes are tracked and reversible.\nNow that we are somewhat familiar with the project structure, let’s create a new post.\n\n\n3. Create a new post\nIn our new RStudio project housing our forked and cloned GitHub repo of the website:\nUse blogdown::new_post(\"New post name\", ext = \".Rmd\") in the console to create a new post with a .Rmd extension. Alternatively, you can go to the Addins button under the menu and choose ‘New Post’ under the BLOGDOWN section and fill in the information in the pop-up window.\n\n\n\nA new blogdown post in RStudio.\n\n\n\nThis will create a new page/post bundle folder or sub-directory within post/ with the date and the name given in new_post() function. e.g., post/2021-11-18-New-post-name.\nAn index.Rmd file has been opened and only contains a YAML header (enclosed by ---). More on that later. Do not change the name of the .Rmd file.\nEach post gets its own bundle which is where your static post-specific files like images or data (.csv files etc.) used in your post should go.\nNote that the “New post name” will not only be the incorporated into the sub-directory name, but also the url to the post. Read: choose wisely and concise > long descriptive name.\nThis “New post name” will automatically be filled as the ‘Title:’ in the .Rmd YAML heading. If you want a longer, descriptive title - change it in the YAML heading.\nIt is recommend you use either blogdown::new_post() or the Addin to create a new post instead of manually creating a new file (File > New File > R Markdown script)\n\nHere, we will stick with the .Rmd extension, but know there are a few file types:\n.md - markdown, cannot run code chunks\n.Rmd - R markdown -> rendered to .html using Pandoc\n.Rmarkdown - also R markdown -> compiled to .markdown documents\nIf you want more of this detailed stuff see: https://bookdown.org/yihui/blogdown/output-format.html.\n\n\n4. Commit the changes i.e., the new post\nLet’s commit our new post. You can add something like a line of text, or not.\n\nIf you cloned the repo properly there should be a Git tab in the upper right hand window in RStudio where the Environment is. In the Git repo, there should be some files listed (i.e., post/2021-11-23-New-post-name) with different colored boxed under the ‘Status’ column - hover with the cursor to see what they mean.\nCheck the ‘Staged’ box for the files you want to include in this commit.\nClick the Commit button and a window will pop-up. In the bottom section, you will see the changes made to the file as additions (green) and deletions (red) - this is known as the diff in GitHub speak. For a new file, the whole thing will be green because it is all new.\nIn the ‘Commit message’ box, add a concise but descriptive message of the changes like ‘Added a new post bundle.’ Once you are happy with everything (file staged, commit messages, etc.) click the ‘Commit’ button.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\nSome stuff will happen and as long as you do not see any obvious errors then it has probably all gone well and you’ve made your first commit!\n\n\n\nCelebrate! Credit: http://www.reactiongifs.com/cheering-minions/\n\n\nKnowing when and how often to commit is a bit of an art that comes with experience. In general, you want to commit changes that are related to a single problem and a good commit message. There is also a History button on the top left corner that will list all the commits with messages you have made and you can view the diff by clicking on a commit. All commits have a unique code which you can use to return to a previous commit etc.\nImportant notes:\n\nOnce you have served the site (see Step 6) it will create additional files within your post bundle directory. Be sure to commit all files in the post bundle created when knitting (/index.html, /index_files, etc.) not just the index.Rmd file as they will be necessary to build the site from GitHub. - You can stage them all together as one commit.\nYou will not be able to see diffs in the commit window until they have been saved.\n\nSee more on committing and best practices from the R packages book.\n\n\n\nHow committing goes… Credit: xkcd comics\n\n\n\n\n5. Push the changes to GitHub\nThe changes and commits we have made are local, but we need to get them onto the GitHub repo and then the website. This is where we need to push.\nIn the Git window, you will see a blue down arrow for pulling and a green up arrow for pushing. You will also see a message along the lines of Your branch is ahead of 'origin/main' by X commits under those buttons.\nFor the purposes of contributing a post to a blogdown website, we will not worry about pulls and fetching upstream. This basically means keeping your origin/master repo synced with the original upstream repo that you forked.\nIf you stick to creating a new post bundle and only modifying files within the post bundles it should be okay without fetching upstream. BUT know that if you are using GitHub to work collaboratively, staying current with the original repo is important and in general it is a good practice to always pull before you push. Recommend Happy Git and GitHub for the useR as a trusty guide.\nIf you want to try fetching upstream it is easiest to do via GitHub. Followed by a pull in RStudio.\n\nLog into your GitHub account online, and navigate to your YOU/blog_website repo.\nUnder the green Code button, there should be a Fetch upstream button that will sync your forked repo with the original upstream repo.\nThere is information about the status of your branch compared to the original upstream repo e.g., ‘up to date’ or ‘X commits ahead/behind’ to give you an idea if you need to fetch or not.\nNow in RStudio, you should be good to pull.\nRevisiting this diagram, the fetch upstream is updating your forked repo from the original yellow repo and then the pull is updating your local repo from your forked repo.\n\n\n\n\nDiagram of fetching upstream and pulling Credit: modified from Happy Git for the useR\n\n\nNow we will push our commits from or local repo to our remote origin/master repo on GitHub.\nIf this is your first time using Git with RStudio, you will have to set-up a personal access token or PAT in GitHub. For detailed directions, go to the GitHub page.\n\nGo to your GitHub account online and click on your profile photo in the upper-right and go to Settings.\nIn the left sidebar, click on Developer settings then Personal Access Tokens.\nClick the Generate a new token button and give a descriptive name and expiration.\nSelect scopes or privacy settings (defaults are generally fine) and the generate the token.\nCopy your PAT and put it in the password field for any pop-ups asking for your GitHub credentials when you push.\n\nIf you see HEAD -> main then all good.\n\n\n\nScreenshot of push window in RStudio.\n\n\nNow if you go back to your GitHub account and forked repo online, you should see the changes you made locally are now in the remote online repo and your commit message.\n\n\n\nScreenshot of pushed changes on forked GitHub repo.\n\n\nIn general, you should commit often and then push.\n\n\n6. Serve the site\nIn the console, run blogdown::serve_site(). Alternatively, can click on RStudio ‘Addins’ and select ‘Serve Site’. Be patient, but what happens?\n\n\n\nScreenshot of served site in RStudio.\n\n\nSome important information on what is going on from blogdown: Creating Websites with R Markdown:\n\nServing the site did the following: 1. Started a local Hugo server to help you preview your website, and 2. Knitted a sample .Rmd post to an .html page. You can see this from the progress message that printed to your console: Rendering content/english/post/2021-11-23-creating-a-post/index.Rmd... Done\n\nYou can also view the locally served website in a browser by clicking on the “Show in new window” button at the top left of the RStudio Viewer pane to the right of the broom.\nServing the site is using something called LiveReload:\n\nLet’s introduce an important and helpful technology that you just used: LiveReload. Serving your site uses LiveReload, which means your website will be automatically rebuilt and reloaded in your web browser when you modify any source file of your website and save it. Basically, once you launch the website in a web browser, you do not need to rebuild it explicitly anymore. All you need to do is edit the source files, such as R Markdown documents, and save them. There is no need to click any buttons or run any commands. LiveReload is implemented via blogdown::serve_site() and Hugo, and you will only need to use it once per work session.\n\nRemember, every time you save your .Rmd file will activate the LiveReload. To stop serving the site locally run blogdown::stop_server() in the console.\n\n\n7. Create your content\nOnce the website is set-up, forked, and cloned… you can get on with creating a new post with minimal coding. The main thing you will need to use is:\n\nR Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML documents that we can incorporate into the website. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. For a website post, knitting is not as important because we can serve our site locally which automatically knits anything new and view the changes as we just learned 👆.\nNow let’s add some information about R Markdown:\n\nYAML header\nThe YAML, or Yet Another Markdown Language, header at the top of the .Rmd is set between --- tags. Here is where information like the Title, Date, Author of the document go and will appear in the post.\nHave a look at previous posts and add any relevant tags or categories as you like.\nThe default .Rmd has some redundant settings (tags vs Tags) so if you use them stick with the lower case settings.\n\n\nFormatting\nCan bold and italicize text.\nHeadings:\nCan specify headings using # marks. The number of has symbols corresponds to the level of the header (2 hashs = level 2 header)\nThis will also create a structure outline of your document you can navigate either by using the ‘Formatting’ button at the bottom of the .Rmd or the right most button in the top right of the .Rmd.\n\n\n\nScreenshot of buttons to view document outline\n\n\nMake lists:\n\none\ntwo\nthree\n\nfull indent for sub-bullet\n\n\nOrdered lists:\n\nlists\nneed spaces\nbefore and after\n\nFor a return to start a new line, leave two spaces at the end of the line.\nLike this.\n\n\nIncluding code\nYou can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nThere is also inline code: The mean of speed in the cars data set is 15.4.\n\n\nInclude mathematical notation\nMathematical notation can be enabled using third party JavaScript libraries like KaTeX. See resource of supported TeX functions. For these to render correctly you must add math: true to the YAML header at the top of the .Rmd.\nTo enter equations like a code chunk or block math, use two $ on separate lines surrounding your equations.\nPut two \\ after a line for a full return.\n\\[\ny = mx + \\beta\\\\\nE = mc^2\n\\]\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\nYou can also use inline math notation by sandwiching it between $ without spaces. Like so \\(\\mu = 0.2566\\).\nAnother inline way: (= = 1.6180339887…)\n\n\nIncluding Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\nChunk options\nChunks are the gray areas in the .Rmd file where you can add code that will be run. These are defined by three back ticks (not a single quote, the key to the left of the 1). You can insert R code chunks but also in other languages! See the green ‘Insert’ code chunk button to see different options. An R code chunk will have the an {r  } after the opening back ticks.\nThe keyboard short cut to add an R code chunk is Ctrl + Alt + I\nYou can also set options in the {} of a chunk like hide the code chunk (echo = FALSE), suppress warnings (warnings = FALSE), and cache the chunk (cache = TRUE) if you have something that takes a while to run.\nLet’s set echo = FALSE for our plot chunk above. We are only interested in seeing the plot, not the code that produces the plot.\nYou can add a code chunk at the beginning of the .Rmd file and set global options that will apply to the whole document.\n\nknitr::opts_chunk$set(echo = TRUE)\n\nSee more at:\n\nRStudio - https://rmarkdown.rstudio.com/lesson-3.html\nR Markdown Cookbook - https://bookdown.org/yihui/rmarkdown-cookbook/\n\nIt is also a good idea to name your chunks as chunks are included in the document outline. Chunks cannot have the same name - you will get an error.\n\n\nInsert objects\nYou can add pictures, weblinks, and GIFs in R Markdown. They all follow the similar hyperlink formats.\nFor a hyperlink to a website you put the word you want to hyperlink in square brackets [] followed immediately (no spaces or characters) by round parentheses (). E.g. [GitHub](www.github.com)\nTo insert an image or gif from a website you add a ! before the square brackets like so: ![description](https://media.giphy.com/media/sJWNLTclcvVmw/giphy.gif). The description in the [] will appear as a caption and the link must end in the appropriate file extension (.gif, .jpg, .png, etc) to work.\n\n\n\nFunny Yawn Credit: https://www.reddit.com/r/gifs/comments/54q75s/goodnight_tongue/\n\n\nYou can also insert pictures using the RStudio ‘Addins’ > ‘Insert Image’ and uploading an image saved on your computer with a few other options like alt text. This will result in the same hyperlink code as inserting an image, but with a relative path instead of the url.\nExample use Addin to insert image\nYou can also save files (like images, html presentations) in your post bundle to link using relative paths on your own.\n\n\n\n\n7. Pull Request\nOkay, so as you were creating the content of your post you should have been committing regularly and then pushing, right?\nLet’s say we are finished with our beautiful post and read to incorporate it into the original upstream repo geocommunity/blog_website that we forked from. Remember, when we push we are pushing the commits we made locally on our computer to our YOU/blog_website repo that we forked from the original repo.\nBecause we are not owner/developers of the upstream geocommunity/blog_website repo we need to submit a pull request to submit our new blog post for approval into the upstream repo.\n\nOn your YOU/blog_website repo in your GitHub account, click on Pull requests.\nOn the right of the screen, there should be a green New pull request button. This will take to you a ‘Comparing changes’ window outlining the files and changes you have made. This will alert you to any merge conflicts with the original upstream repo. Again, sticking to creating a new post bundle/content should avoid any merge conflicts.\nClick the green Create pull request button on the right. This will take you to a ‘Open a pull request’ window that will have your last commit and space to add a larger message with your pull request or PR.\nOnce you are happy, click the green button at the end and wait for approval. You can have a bit of a conversation to hash out any issues as well over the approval process.\n\n\n\n\nScreenshot of GitHub open a pull request.\n\n\nCongratulations - now you have submitted your blog post to a blogdown site!\n\n\n\nCheers Credit: Sony"
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#troubleshooting",
    "href": "posts/how-to-contribute-post/index.html#troubleshooting",
    "title": "How to contribute a post",
    "section": "Troubleshooting…",
    "text": "Troubleshooting…\nLet’s face it, the likelihood of something going awry following this tutorial is not 0… Few things that might help along the way:\n\nSometimes it is difficult to tell when the ‘LiveReload’ has finished or if you are used to saving regularly every few minutes that constant updating of ‘LiveReload’ can freeze RStudio.\n\nSolution: The good ’ole Restart R (Session > Restart R) or close and re-open.\n\nFormatting wise, it’s a good idea to put full line returns before/after formatting bits like lists and inserting images. Something to check if your content is not formatting as you expect.\nOTHERS??"
  },
  {
    "objectID": "posts/how-to-contribute-post/index.html#resources-mentioned",
    "href": "posts/how-to-contribute-post/index.html#resources-mentioned",
    "title": "How to contribute a post",
    "section": "Resources mentioned:",
    "text": "Resources mentioned:\n\nCreating Websites with R Markdown by Yihui Xi, Amber Thomas, and Alison Presmanes Hill.\n“Up & running with blogdown in 2021” Alison Hill.\n“Creating a Geospatial Blog with blogdown” on the UQGSAC blog by Mitch Rudge and Stéphane Guillou.\nExcuse me, do you have a moment to talk about version control? by Jenny Bryan\nHappy Git and GitHub for the useR by Jenny Bryan.\nGetting Started with GitHub R Ladies Brisbane presentation by Caitie Kuemple.\ngeocommunity/website GitHub repo\n18.6 Commit best practices from the R packages book by Hadley Wickham and Jenny Bryan.\nR Markdown\nKaTeX - Supported Functions\nCode Chuncks\nR Markdown Cookbook by Yihui Xie, Christophe Dervieux, Emily Riederer."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#research-bazaar-queensland-2022",
    "href": "posts/build-blog-w-quarto/index.html#research-bazaar-queensland-2022",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Research Bazaar Queensland 2022",
    "text": "Research Bazaar Queensland 2022\nThis session was run as a workshop for ResBaz Queensland 2022. ResBaz is a global festival promoting digital literacy at the centre of modern research.\nWhat we will cover:\n\nQuarto basics\nGit and GitHub basics\nHow to create a post on a quarto website\nMarkdown basics\n\nI have pieced this together using many other resources on the above which are mentioned throughout. Thank you to Mitch and Christina for their help with this tutorial and workshop!\nWhat you will need:\n\nInstallations - R, RStudio, Git\nGitHub account (free) with your login and personal access token (PAT) details handy\nNetlify account (free)"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#part-2-git---what-is-it",
    "href": "posts/build-blog-w-quarto/index.html#part-2-git---what-is-it",
    "title": "Build a blog with git, R, and quarto",
    "section": "Part 2: Git - what is it?",
    "text": "Part 2: Git - what is it?\nA version control software (think track changes) useful for collaborating on and sharing code.\nGit is the software itself that records changes to a set of files locally. There are several hosting platforms that are like online repositories (think Dropbox, Google Drive, etc.) that work with Git: Bitbucket, GitLab, and GitHub to name a few.\nThese platforms not only allow for version control but also to collaborate, organize, and back up projects.\nIn this case, we will be using GitHub to access the website files, make some changes (i.e., add a post), and then incorporate those changes back to the website repository on GitHub which will automatically update the website itself. 🙌\nFirst, we will contribute a post to an existing website repository on GitHub, but there are lots of fabulous and free resources online that go more into depth on Git:\n\nIf you need to be convinced to use Git for version control see this article and Happy Git and GitHub for the useR to git started both by Git/R guru Jenny Bryan.\nSee Caitie Kuempel’s R Ladies Brisbane presentation on getting started with GitHub in RStudio.\n\n\nGit Terminology\nRepository/repo - where a project is stored in GitHub. Think of it like a folder holding all the relevant documents that you can version control, view history, and add collaborators. The repository or repo holds all the relevant files for the website - most of which we will not touch.\nFork - A copy of another user’s repo on your account. This allows you to freely change a project without affecting the original upstream repo. You can keep your fork synced with changes in the original repo. - this is fetching upstream.\nClone - a copy of a repository that lives on your computer instead of a website server like GitHub. Is still connected to the remote repo online and you can push/pull edits.\nCommit - is one or more changes to a file or set of files that you are asking GitHub to keep track of.\nPush - sending your committed changes to a remote repository on GitHub. Local changes updated on the GitHub website where other people can access.\nPull - incorporating and merging changes. An edit on the remote repository on GitHub can be pulled to a local repository.\nDiff - difference, or changes made that are visible as insertions/deletions for a commit.\nMain - the default branch you are on. Master has recently updated to main, but they are the same thing. You are more likely to come across master on older resources. Jenny Bryan strongly urges you to create a new branch to work off of which requires using command line. For the purpose of contributing to a quarto website, I will forgo covering this as it is unlikely more than one person will be contributing at the same time.\nOrigin - the remote repo online from which you have cloned your local copy from.\n\n\nPublishing our blog on Netlify\n\n\nHow to create a post in an existing blog\nStarting with Git and GitHub:\n\n\n1. Fork the repo\n\nSign in with your GitHub account\nGo to the geocommunity/website repo\nPress the ‘Fork’ button at the top right. \nA forked copy of the repo should now be visible in your GitHub account. YOU/blog_website is the origin for your local copy of the repo in RStudio and geocommunity/blog_website is the upstream repo.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\n\n\n2. Clone the repo in a new RStudio project\n\nYou will need your GitHub credentials handy.\nYou can also set up RStudio so you do not need to input your GitHub credentials every time.\n\nFrom your forked repo, click on the green ‘Code’ button and copy the link in the pop-up window.\n\n\n\nScreenshot of finding the url to clone.\n\n\nNext, in RStudio, go to File > New Project. In the pop-up window, click the last option ‘Version Control’ and then ‘Git’. In the following window, paste the url you copied from your forked GitHub repo in the first box which will automatically input the name of the project.\n\n\n\nPop-up windows of cloning a GitHub repo in RStudio\n\n\nConceptually, what we have done is:\n\n\n\nConceptual diagram of forking and cloning in GitHub Credit: Happy Git for the useR\n\n\nNow that we have cloned the repository, let’s explore the file structure a little in the ‘Files’ tab in RStudio. It is NOT a very intuitively set-up even for intermediate users of R. For the purposes of creating a new post to add to the blog, we are mostly concerned with the content/english/ directory that contains the post/ sub-directory.\nThe rest of the files are the ‘backend’ of the site using html, CSS, js, etc. to build the website. Have a look if you are curious but make changes at the risk of being ‘that person’ to break the site! But don’t worry, since we are using Git version control all changes are tracked and reversible.\nNow that we are somewhat familiar with the project structure, let’s create a new post.\n\n\n3. Create a new post\nIn our new RStudio project housing our forked and cloned GitHub repo of the website:\nUse blogdown::new_post(\"New post name\", ext = \".Rmd\") in the console to create a new post with a .Rmd extension. Alternatively, you can go to the Addins button under the menu and choose ‘New Post’ under the BLOGDOWN section and fill in the information in the pop-up window.\n\n\n\nA new blogdown post in RStudio.\n\n\n\nThis will create a new page/post bundle folder or sub-directory within post/ with the date and the name given in new_post() function. e.g., post/2021-11-18-New-post-name.\nAn index.Rmd file has been opened and only contains a YAML header (enclosed by ---). More on that later. Do not change the name of the .Rmd file.\nEach post gets its own bundle which is where your static post-specific files like images or data (.csv files etc.) used in your post should go.\nNote that the “New post name” will not only be the incorporated into the sub-directory name, but also the url to the post. Read: choose wisely and concise > long descriptive name.\nThis “New post name” will automatically be filled as the ‘Title:’ in the .Rmd YAML heading. If you want a longer, descriptive title - change it in the YAML heading.\nIt is recommend you use either blogdown::new_post() or the Addin to create a new post instead of manually creating a new file (File > New File > R Markdown script)\n\nHere, we will stick with the .Rmd extension, but know there are a few file types:\n.md - markdown, cannot run code chunks\n.Rmd - R markdown -> rendered to .html using Pandoc\n.Rmarkdown - also R markdown -> compiled to .markdown documents\nIf you want more of this detailed stuff see: https://bookdown.org/yihui/blogdown/output-format.html.\n\n\n4. Commit the changes i.e., the new post\nLet’s commit our new post. You can add something like a line of text, or not.\n\nIf you cloned the repo properly there should be a Git tab in the upper right hand window in RStudio where the Environment is. In the Git repo, there should be some files listed (i.e., post/2021-11-23-New-post-name) with different colored boxed under the ‘Status’ column - hover with the cursor to see what they mean.\nCheck the ‘Staged’ box for the files you want to include in this commit.\nClick the Commit button and a window will pop-up. In the bottom section, you will see the changes made to the file as additions (green) and deletions (red) - this is known as the diff in GitHub speak. For a new file, the whole thing will be green because it is all new.\nIn the ‘Commit message’ box, add a concise but descriptive message of the changes like ‘Added a new post bundle.’ Once you are happy with everything (file staged, commit messages, etc.) click the ‘Commit’ button.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\nSome stuff will happen and as long as you do not see any obvious errors then it has probably all gone well and you’ve made your first commit!\n\n\n\nCelebrate! Credit: http://www.reactiongifs.com/cheering-minions/\n\n\nKnowing when and how often to commit is a bit of an art that comes with experience. In general, you want to commit changes that are related to a single problem and a good commit message. There is also a History button on the top left corner that will list all the commits with messages you have made and you can view the diff by clicking on a commit. All commits have a unique code which you can use to return to a previous commit etc.\nImportant notes:\n\nOnce you have served the site (see Step 6) it will create additional files within your post bundle directory. Be sure to commit all files in the post bundle created when knitting (/index.html, /index_files, etc.) not just the index.Rmd file as they will be necessary to build the site from GitHub. - You can stage them all together as one commit.\nYou will not be able to see diffs in the commit window until they have been saved.\n\nSee more on committing and best practices from the R packages book.\n\n\n\nHow committing goes… Credit: xkcd comics\n\n\n\n\n5. Push the changes to GitHub\nThe changes and commits we have made are local, but we need to get them onto the GitHub repo and then the website. This is where we need to push.\nIn the Git window, you will see a blue down arrow for pulling and a green up arrow for pushing. You will also see a message along the lines of Your branch is ahead of 'origin/main' by X commits under those buttons.\nFor the purposes of contributing a post to a blogdown website, we will not worry about pulls and fetching upstream. This basically means keeping your origin/master repo synced with the original upstream repo that you forked.\nIf you stick to creating a new post bundle and only modifying files within the post bundles it should be okay without fetching upstream. BUT know that if you are using GitHub to work collaboratively, staying current with the original repo is important and in general it is a good practice to always pull before you push. Recommend Happy Git and GitHub for the useR as a trusty guide.\nIf you want to try fetching upstream it is easiest to do via GitHub. Followed by a pull in RStudio.\n\nLog into your GitHub account online, and navigate to your YOU/blog_website repo.\nUnder the green Code button, there should be a Fetch upstream button that will sync your forked repo with the original upstream repo.\nThere is information about the status of your branch compared to the original upstream repo e.g., ‘up to date’ or ‘X commits ahead/behind’ to give you an idea if you need to fetch or not.\nNow in RStudio, you should be good to pull.\nRevisiting this diagram, the fetch upstream is updating your forked repo from the original yellow repo and then the pull is updating your local repo from your forked repo.\n\n\n\n\nDiagram of fetching upstream and pulling Credit: modified from Happy Git for the useR\n\n\nNow we will push our commits from or local repo to our remote origin/master repo on GitHub.\nIf this is your first time using Git with RStudio, you will have to set-up a personal access token or PAT in GitHub. For detailed directions, go to the GitHub page.\n\nGo to your GitHub account online and click on your profile photo in the upper-right and go to Settings.\nIn the left sidebar, click on Developer settings then Personal Access Tokens.\nClick the Generate a new token button and give a descriptive name and expiration.\nSelect scopes or privacy settings (defaults are generally fine) and the generate the token.\nCopy your PAT and put it in the password field for any pop-ups asking for your GitHub credentials when you push.\n\nIf you see HEAD -> main then all good.\n\n\n\nScreenshot of push window in RStudio.\n\n\nNow if you go back to your GitHub account and forked repo online, you should see the changes you made locally are now in the remote online repo and your commit message.\n\n\n\nScreenshot of pushed changes on forked GitHub repo.\n\n\nIn general, you should commit often and then push.\n\n\n6. Serve the site\nIn the console, run blogdown::serve_site(). Alternatively, can click on RStudio ‘Addins’ and select ‘Serve Site’. Be patient, but what happens?\n\n\n\nScreenshot of served site in RStudio.\n\n\nSome important information on what is going on from blogdown: Creating Websites with R Markdown:\n\nServing the site did the following: 1. Started a local Hugo server to help you preview your website, and 2. Knitted a sample .Rmd post to an .html page. You can see this from the progress message that printed to your console: Rendering content/english/post/2021-11-23-creating-a-post/index.Rmd... Done\n\nYou can also view the locally served website in a browser by clicking on the “Show in new window” button at the top left of the RStudio Viewer pane to the right of the broom.\nServing the site is using something called LiveReload:\n\nLet’s introduce an important and helpful technology that you just used: LiveReload. Serving your site uses LiveReload, which means your website will be automatically rebuilt and reloaded in your web browser when you modify any source file of your website and save it. Basically, once you launch the website in a web browser, you do not need to rebuild it explicitly anymore. All you need to do is edit the source files, such as R Markdown documents, and save them. There is no need to click any buttons or run any commands. LiveReload is implemented via blogdown::serve_site() and Hugo, and you will only need to use it once per work session.\n\nRemember, every time you save your .Rmd file will activate the LiveReload. To stop serving the site locally run blogdown::stop_server() in the console.\n\n\n7. Create your content\nOnce the website is set-up, forked, and cloned… you can get on with creating a new post with minimal coding. The main thing you will need to use is:\n\nR Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML documents that we can incorporate into the website. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. For a website post, knitting is not as important because we can serve our site locally which automatically knits anything new and view the changes as we just learned 👆.\nNow let’s add some information about R Markdown:\n\nYAML header\nThe YAML, or Yet Another Markdown Language, header at the top of the .Rmd is set between --- tags. Here is where information like the Title, Date, Author of the document go and will appear in the post.\nHave a look at previous posts and add any relevant tags or categories as you like.\nThe default .Rmd has some redundant settings (tags vs Tags) so if you use them stick with the lower case settings.\n\n\nFormatting\nCan bold and italicize text.\nHeadings:\nCan specify headings using # marks. The number of has symbols corresponds to the level of the header (2 hashs = level 2 header)\nThis will also create a structure outline of your document you can navigate either by using the ‘Formatting’ button at the bottom of the .Rmd or the right most button in the top right of the .Rmd.\n\n\n\nScreenshot of buttons to view document outline\n\n\nMake lists:\n\none\ntwo\nthree\n\nfull indent for sub-bullet\n\n\nOrdered lists:\n\nlists\nneed spaces\nbefore and after\n\nFor a return to start a new line, leave two spaces at the end of the line.\nLike this.\n\n\nIncluding code\nYou can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nThere is also inline code: The mean of speed in the cars data set is 15.4.\n\n\nInclude mathematical notation\nMathematical notation can be enabled using third party JavaScript libraries like KaTeX. See resource of supported TeX functions. For these to render correctly you must add math: true to the YAML header at the top of the .Rmd.\nTo enter equations like a code chunk or block math, use two $ on separate lines surrounding your equations.\nPut two \\ after a line for a full return.\n\\[\ny = mx + \\beta\\\\\nE = mc^2\n\\]\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\nYou can also use inline math notation by sandwiching it between $ without spaces. Like so \\(\\mu = 0.2566\\).\nAnother inline way: (= = 1.6180339887…)\n\n\nIncluding Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\nChunk options\nChunks are the gray areas in the .Rmd file where you can add code that will be run. These are defined by three back ticks (not a single quote, the key to the left of the 1). You can insert R code chunks but also in other languages! See the green ‘Insert’ code chunk button to see different options. An R code chunk will have the an {r  } after the opening back ticks.\nThe keyboard short cut to add an R code chunk is Ctrl + Alt + I\nYou can also set options in the {} of a chunk like hide the code chunk (echo = FALSE), suppress warnings (warnings = FALSE), and cache the chunk (cache = TRUE) if you have something that takes a while to run.\nLet’s set echo = FALSE for our plot chunk above. We are only interested in seeing the plot, not the code that produces the plot.\nYou can add a code chunk at the beginning of the .Rmd file and set global options that will apply to the whole document.\n\nknitr::opts_chunk$set(echo = TRUE)\n\nSee more at:\n\nRStudio - https://rmarkdown.rstudio.com/lesson-3.html\nR Markdown Cookbook - https://bookdown.org/yihui/rmarkdown-cookbook/\n\nIt is also a good idea to name your chunks as chunks are included in the document outline. Chunks cannot have the same name - you will get an error.\n\n\nInsert objects\nYou can add pictures, weblinks, and GIFs in R Markdown. They all follow the similar hyperlink formats.\nFor a hyperlink to a website you put the word you want to hyperlink in square brackets [] followed immediately (no spaces or characters) by round parentheses (). E.g. [GitHub](www.github.com)\nTo insert an image or gif from a website you add a ! before the square brackets like so: ![description](https://media.giphy.com/media/sJWNLTclcvVmw/giphy.gif). The description in the [] will appear as a caption and the link must end in the appropriate file extension (.gif, .jpg, .png, etc) to work.\n\n\n\nFunny Yawn Credit: https://www.reddit.com/r/gifs/comments/54q75s/goodnight_tongue/\n\n\nYou can also insert pictures using the RStudio ‘Addins’ > ‘Insert Image’ and uploading an image saved on your computer with a few other options like alt text. This will result in the same hyperlink code as inserting an image, but with a relative path instead of the url.\nExample use Addin to insert image\nYou can also save files (like images, html presentations) in your post bundle to link using relative paths on your own.\n\n\n\n\n7. Pull Request\nOkay, so as you were creating the content of your post you should have been committing regularly and then pushing, right?\nLet’s say we are finished with our beautiful post and read to incorporate it into the original upstream repo geocommunity/blog_website that we forked from. Remember, when we push we are pushing the commits we made locally on our computer to our YOU/blog_website repo that we forked from the original repo.\nBecause we are not owner/developers of the upstream geocommunity/blog_website repo we need to submit a pull request to submit our new blog post for approval into the upstream repo.\n\nOn your YOU/blog_website repo in your GitHub account, click on Pull requests.\nOn the right of the screen, there should be a green New pull request button. This will take to you a ‘Comparing changes’ window outlining the files and changes you have made. This will alert you to any merge conflicts with the original upstream repo. Again, sticking to creating a new post bundle/content should avoid any merge conflicts.\nClick the green Create pull request button on the right. This will take you to a ‘Open a pull request’ window that will have your last commit and space to add a larger message with your pull request or PR.\nOnce you are happy, click the green button at the end and wait for approval. You can have a bit of a conversation to hash out any issues as well over the approval process.\n\n\n\n\nScreenshot of GitHub open a pull request.\n\n\nCongratulations - now you have submitted your blog post to a blogdown site!\n\n\n\nCheers Credit: Sony"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#not-sure-if-will-include-all-of-this-content",
    "href": "posts/build-blog-w-quarto/index.html#not-sure-if-will-include-all-of-this-content",
    "title": "Build a blog with Quarto, git, RStudio",
    "section": "not sure if will include all of this content:",
    "text": "not sure if will include all of this content:\n\nHow to create a post in an existing blog\nStarting with Git and GitHub:\n\n\n1. Fork the repo\n\nSign in with your GitHub account\nGo to the geocommunity/website repo\nPress the ‘Fork’ button at the top right. \nA forked copy of the repo should now be visible in your GitHub account. YOU/blog_website is the origin for your local copy of the repo in RStudio and geocommunity/blog_website is the upstream repo.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\n\n\n2. Clone the repo in a new RStudio project\n\nYou will need your GitHub credentials handy.\nYou can also set up RStudio so you do not need to input your GitHub credentials every time.\n\nFrom your forked repo, click on the green ‘Code’ button and copy the link in the pop-up window.\n\n\n\nScreenshot of finding the url to clone.\n\n\nNext, in RStudio, go to File > New Project. In the pop-up window, click the last option ‘Version Control’ and then ‘Git’. In the following window, paste the url you copied from your forked GitHub repo in the first box which will automatically input the name of the project.\n\n\n\nPop-up windows of cloning a GitHub repo in RStudio\n\n\nConceptually, what we have done is:\n\n\n\nConceptual diagram of forking and cloning in GitHub Credit: Happy Git for the useR\n\n\nNow that we have cloned the repository, let’s explore the file structure a little in the ‘Files’ tab in RStudio. It is NOT a very intuitively set-up even for intermediate users of R. For the purposes of creating a new post to add to the blog, we are mostly concerned with the content/english/ directory that contains the post/ sub-directory.\nThe rest of the files are the ‘backend’ of the site using html, CSS, js, etc. to build the website. Have a look if you are curious but make changes at the risk of being ‘that person’ to break the site! But don’t worry, since we are using Git version control all changes are tracked and reversible.\nNow that we are somewhat familiar with the project structure, let’s create a new post.\n\n\n3. Create a new post\nIn our new RStudio project housing our forked and cloned GitHub repo of the website:\nUse blogdown::new_post(\"New post name\", ext = \".Rmd\") in the console to create a new post with a .Rmd extension. Alternatively, you can go to the Addins button under the menu and choose ‘New Post’ under the BLOGDOWN section and fill in the information in the pop-up window.\n\n\n\nA new blogdown post in RStudio.\n\n\n\nThis will create a new page/post bundle folder or sub-directory within post/ with the date and the name given in new_post() function. e.g., post/2021-11-18-New-post-name.\nAn index.Rmd file has been opened and only contains a YAML header (enclosed by ---). More on that later. Do not change the name of the .Rmd file.\nEach post gets its own bundle which is where your static post-specific files like images or data (.csv files etc.) used in your post should go.\nNote that the “New post name” will not only be the incorporated into the sub-directory name, but also the url to the post. Read: choose wisely and concise > long descriptive name.\nThis “New post name” will automatically be filled as the ‘Title:’ in the .Rmd YAML heading. If you want a longer, descriptive title - change it in the YAML heading.\nIt is recommend you use either blogdown::new_post() or the Addin to create a new post instead of manually creating a new file (File > New File > R Markdown script)\n\nHere, we will stick with the .Rmd extension, but know there are a few file types:\n.md - markdown, cannot run code chunks\n.Rmd - R markdown -> rendered to .html using Pandoc\n.Rmarkdown - also R markdown -> compiled to .markdown documents\nIf you want more of this detailed stuff see: https://bookdown.org/yihui/blogdown/output-format.html.\n\n\n4. Commit the changes i.e., the new post\nLet’s commit our new post. You can add something like a line of text, or not.\n\nIf you cloned the repo properly there should be a Git tab in the upper right hand window in RStudio where the Environment is. In the Git repo, there should be some files listed (i.e., post/2021-11-23-New-post-name) with different colored boxed under the ‘Status’ column - hover with the cursor to see what they mean.\nCheck the ‘Staged’ box for the files you want to include in this commit.\nClick the Commit button and a window will pop-up. In the bottom section, you will see the changes made to the file as additions (green) and deletions (red) - this is known as the diff in GitHub speak. For a new file, the whole thing will be green because it is all new.\nIn the ‘Commit message’ box, add a concise but descriptive message of the changes like ‘Added a new post bundle.’ Once you are happy with everything (file staged, commit messages, etc.) click the ‘Commit’ button.\n\n\n\n\nScreenshot of a forked repo on GitHub.\n\n\nSome stuff will happen and as long as you do not see any obvious errors then it has probably all gone well and you’ve made your first commit!\n\n\n\nCelebrate! Credit: http://www.reactiongifs.com/cheering-minions/\n\n\nKnowing when and how often to commit is a bit of an art that comes with experience. In general, you want to commit changes that are related to a single problem and a good commit message. There is also a History button on the top left corner that will list all the commits with messages you have made and you can view the diff by clicking on a commit. All commits have a unique code which you can use to return to a previous commit etc.\nImportant notes:\n\nOnce you have served the site (see Step 6) it will create additional files within your post bundle directory. Be sure to commit all files in the post bundle created when knitting (/index.html, /index_files, etc.) not just the index.Rmd file as they will be necessary to build the site from GitHub. - You can stage them all together as one commit.\nYou will not be able to see diffs in the commit window until they have been saved.\n\nSee more on committing and best practices from the R packages book.\n\n\n5. Push the changes to GitHub\nThe changes and commits we have made are local, but we need to get them onto the GitHub repo and then the website. This is where we need to push.\nIn the Git window, you will see a blue down arrow for pulling and a green up arrow for pushing. You will also see a message along the lines of Your branch is ahead of 'origin/main' by X commits under those buttons.\nFor the purposes of contributing a post to a blogdown website, we will not worry about pulls and fetching upstream. This basically means keeping your origin/master repo synced with the original upstream repo that you forked.\nIf you stick to creating a new post bundle and only modifying files within the post bundles it should be okay without fetching upstream. BUT know that if you are using GitHub to work collaboratively, staying current with the original repo is important and in general it is a good practice to always pull before you push. Recommend Happy Git and GitHub for the useR as a trusty guide.\nIf you want to try fetching upstream it is easiest to do via GitHub. Followed by a pull in RStudio.\n\nLog into your GitHub account online, and navigate to your YOU/blog_website repo.\nUnder the green Code button, there should be a Fetch upstream button that will sync your forked repo with the original upstream repo.\nThere is information about the status of your branch compared to the original upstream repo e.g., ‘up to date’ or ‘X commits ahead/behind’ to give you an idea if you need to fetch or not.\nNow in RStudio, you should be good to pull.\nRevisiting this diagram, the fetch upstream is updating your forked repo from the original yellow repo and then the pull is updating your local repo from your forked repo.\n\n\n\n\nDiagram of fetching upstream and pulling Credit: modified from Happy Git for the useR\n\n\nNow we will push our commits from or local repo to our remote origin/master repo on GitHub.\nIf this is your first time using Git with RStudio, you will have to set-up a personal access token or PAT in GitHub. For detailed directions, go to the GitHub page.\n\nGo to your GitHub account online and click on your profile photo in the upper-right and go to Settings.\nIn the left sidebar, click on Developer settings then Personal Access Tokens.\nClick the Generate a new token button and give a descriptive name and expiration.\nSelect scopes or privacy settings (defaults are generally fine) and the generate the token.\nCopy your PAT and put it in the password field for any pop-ups asking for your GitHub credentials when you push.\n\nIf you see HEAD -> main then all good.\n\n\n\nScreenshot of push window in RStudio.\n\n\nNow if you go back to your GitHub account and forked repo online, you should see the changes you made locally are now in the remote online repo and your commit message.\n\n\n\nScreenshot of pushed changes on forked GitHub repo.\n\n\nIn general, you should commit often and then push.\n\n\n6. Serve the site\nIn the console, run blogdown::serve_site(). Alternatively, can click on RStudio ‘Addins’ and select ‘Serve Site’. Be patient, but what happens?\n\n\n\nScreenshot of served site in RStudio.\n\n\nSome important information on what is going on from blogdown: Creating Websites with R Markdown:\n\nServing the site did the following: 1. Started a local Hugo server to help you preview your website, and 2. Knitted a sample .Rmd post to an .html page. You can see this from the progress message that printed to your console: Rendering content/english/post/2021-11-23-creating-a-post/index.Rmd... Done\n\nYou can also view the locally served website in a browser by clicking on the “Show in new window” button at the top left of the RStudio Viewer pane to the right of the broom.\nServing the site is using something called LiveReload:\n\nLet’s introduce an important and helpful technology that you just used: LiveReload. Serving your site uses LiveReload, which means your website will be automatically rebuilt and reloaded in your web browser when you modify any source file of your website and save it. Basically, once you launch the website in a web browser, you do not need to rebuild it explicitly anymore. All you need to do is edit the source files, such as R Markdown documents, and save them. There is no need to click any buttons or run any commands. LiveReload is implemented via blogdown::serve_site() and Hugo, and you will only need to use it once per work session.\n\nRemember, every time you save your .Rmd file will activate the LiveReload. To stop serving the site locally run blogdown::stop_server() in the console.\n\n\n7. Create your content\nOnce the website is set-up, forked, and cloned… you can get on with creating a new post with minimal coding. The main thing you will need to use is:\n\nR Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML documents that we can incorporate into the website. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. For a website post, knitting is not as important because we can serve our site locally which automatically knits anything new and view the changes as we just learned 👆.\nNow let’s add some information about R Markdown:\n\nYAML header\nThe YAML, or Yet Another Markdown Language, header at the top of the .Rmd is set between --- tags. Here is where information like the Title, Date, Author of the document go and will appear in the post.\nHave a look at previous posts and add any relevant tags or categories as you like.\nThe default .Rmd has some redundant settings (tags vs Tags) so if you use them stick with the lower case settings.\n\n\nFormatting\nCan bold and italicize text.\nHeadings:\nCan specify headings using # marks. The number of has symbols corresponds to the level of the header (2 hashs = level 2 header)\nThis will also create a structure outline of your document you can navigate either by using the ‘Formatting’ button at the bottom of the .Rmd or the right most button in the top right of the .Rmd.\n\n\n\nScreenshot of buttons to view document outline\n\n\nMake lists:\n\none\ntwo\nthree\n\nfull indent for sub-bullet\n\n\nOrdered lists:\n\nlists\nneed spaces\nbefore and after\n\nFor a return to start a new line, leave two spaces at the end of the line.\nLike this.\n\n\nIncluding code\nYou can embed an R code chunk like this:\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\nThere is also inline code: The mean of speed in the cars data set is 15.4.\n\n\nInclude mathematical notation\nMathematical notation can be enabled using third party JavaScript libraries like KaTeX. See resource of supported TeX functions. For these to render correctly you must add math: true to the YAML header at the top of the .Rmd.\nTo enter equations like a code chunk or block math, use two $ on separate lines surrounding your equations.\nPut two \\ after a line for a full return.\n\\[\ny = mx + \\beta\\\\\nE = mc^2\n\\]\n\\[ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } \\]\nYou can also use inline math notation by sandwiching it between $ without spaces. Like so \\(\\mu = 0.2566\\).\nAnother inline way: (= = 1.6180339887…)\n\n\nIncluding Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\nChunk options\nChunks are the gray areas in the .Rmd file where you can add code that will be run. These are defined by three back ticks (not a single quote, the key to the left of the 1). You can insert R code chunks but also in other languages! See the green ‘Insert’ code chunk button to see different options. An R code chunk will have the an {r  } after the opening back ticks.\nThe keyboard short cut to add an R code chunk is Ctrl + Alt + I\nYou can also set options in the {} of a chunk like hide the code chunk (echo = FALSE), suppress warnings (warnings = FALSE), and cache the chunk (cache = TRUE) if you have something that takes a while to run.\nLet’s set echo = FALSE for our plot chunk above. We are only interested in seeing the plot, not the code that produces the plot.\nYou can add a code chunk at the beginning of the .Rmd file and set global options that will apply to the whole document.\n\nknitr::opts_chunk$set(echo = TRUE)\n\nSee more at:\n\nRStudio - https://rmarkdown.rstudio.com/lesson-3.html\nR Markdown Cookbook - https://bookdown.org/yihui/rmarkdown-cookbook/\n\nIt is also a good idea to name your chunks as chunks are included in the document outline. Chunks cannot have the same name - you will get an error.\n\n\nInsert objects\nYou can add pictures, weblinks, and GIFs in R Markdown. They all follow the similar hyperlink formats.\nFor a hyperlink to a website you put the word you want to hyperlink in square brackets [] followed immediately (no spaces or characters) by round parentheses (). E.g. [GitHub](www.github.com)\nTo insert an image or gif from a website you add a ! before the square brackets like so: ![description](https://media.giphy.com/media/sJWNLTclcvVmw/giphy.gif). The description in the [] will appear as a caption and the link must end in the appropriate file extension (.gif, .jpg, .png, etc) to work.\n\n\n\nFunny Yawn Credit: https://www.reddit.com/r/gifs/comments/54q75s/goodnight_tongue/\n\n\nYou can also insert pictures using the RStudio ‘Addins’ > ‘Insert Image’ and uploading an image saved on your computer with a few other options like alt text. This will result in the same hyperlink code as inserting an image, but with a relative path instead of the url.\nExample use Addin to insert image\nYou can also save files (like images, html presentations) in your post bundle to link using relative paths on your own.\n\n\n\n\n7. Pull Request\nOkay, so as you were creating the content of your post you should have been committing regularly and then pushing, right?\nLet’s say we are finished with our beautiful post and read to incorporate it into the original upstream repo geocommunity/blog_website that we forked from. Remember, when we push we are pushing the commits we made locally on our computer to our YOU/blog_website repo that we forked from the original repo.\nBecause we are not owner/developers of the upstream geocommunity/blog_website repo we need to submit a pull request to submit our new blog post for approval into the upstream repo.\n\nOn your YOU/blog_website repo in your GitHub account, click on Pull requests.\nOn the right of the screen, there should be a green New pull request button. This will take to you a ‘Comparing changes’ window outlining the files and changes you have made. This will alert you to any merge conflicts with the original upstream repo. Again, sticking to creating a new post bundle/content should avoid any merge conflicts.\nClick the green Create pull request button on the right. This will take you to a ‘Open a pull request’ window that will have your last commit and space to add a larger message with your pull request or PR.\nOnce you are happy, click the green button at the end and wait for approval. You can have a bit of a conversation to hash out any issues as well over the approval process.\n\n\n\n\nScreenshot of GitHub open a pull request.\n\n\nCongratulations - now you have submitted your blog post to a blogdown site!\n\n\n\nCheers Credit: Sony"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#publishing",
    "href": "posts/build-blog-w-quarto/index.html#publishing",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Publishing",
    "text": "Publishing\nThere are several options for publishing your quarto blog outlined here. Such as Quarto Pub and Netlify.\n\n\n\n\n\n\nNote\n\n\n\nQuarto Pub is a free publishing service for quarto content. It requires having a login and an access token. This is a relatively straight forward way to get your blog online. There are some limitations to the size and everything published on Quarto Pub is publicly visible. The link above outlines the steps to publish with Quart Pub. This method does not involve using git.\n\n\nFor this workshop, we will focus on Netlify.\nIn your Netlify account, click on the teal Add new site button.\nImport an existing project from a GitHub repository. You will probably need to configure your Netlify on GitHub. Can either configure all repositories or pick a specific repository.\n\nAuthorize Quarto to access Netlify.\n\nNow that we’ve connected our GitHub to Netlify, go to the Site settings. At the bottom ‘Publish directory’ section put the _site/ folder where your website is rendered.\n\nIt will take a few minutes to deploy your website. Netlify automatically generates a random url like “lighthearted-travesseiro-492jfg3” which can be changed in the ‘Domain settings’. Or course, you can also use a custom url to remove the ‘netlify.app’ at the end of the url.\nNow, make a change in the welcome post, render the site, commit the changes, and push the changes in the .qmd file. Look at your GitHub remote repo to check that the changes are there. Now check your website - did it update as well?\nAs we defined above, unless you also commited the updated contents of the _site/ the website will not have updated. This folder is where all the rendered outputs are that are used to build the site on Netlify. Commit the updated _site/ folder and push. Now check your website again.\n\n\n\nCheers Credit: Sony"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#git---what-is-it-1",
    "href": "posts/build-blog-w-quarto/index.html#git---what-is-it-1",
    "title": "Build a blog with Quarto, git, RStudio",
    "section": "Git - what is it?",
    "text": "Git - what is it?"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#add-a-map",
    "href": "posts/build-blog-w-quarto/index.html#add-a-map",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Add a map",
    "text": "Add a map\nThis is a spatial community of practic - let’s add a map of ResBazQld 2022 to a post using leaflet.\n\n# install.packages(\"leaflet\")\nlibrary(leaflet)\nlibrary(magrittr)\nleaflet() %>% \n  addTiles() %>% # default background map\n  addMarkers(lat = -27.552, lng = 153.0535,\n             popup = \"Location of ResBazQld 2022\")"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#troubleshooting-tbc",
    "href": "posts/build-blog-w-quarto/index.html#troubleshooting-tbc",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Troubleshooting TBC",
    "text": "Troubleshooting TBC"
  },
  {
    "objectID": "posts/build-blog-w-quarto/index.html#resources",
    "href": "posts/build-blog-w-quarto/index.html#resources",
    "title": "Build a blog with Quarto, git, and RStudio",
    "section": "Resources",
    "text": "Resources\nQuarto\n\nBuilding a blog with quarto, Youtube video, website - Isabella Valasquez, Rstudio\nWelcome to Quarto!, Tom Mock, RStudio"
  }
]